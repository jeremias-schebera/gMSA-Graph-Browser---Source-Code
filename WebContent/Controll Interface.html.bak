<!DOCTYPE html>
<html lang="eng">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title></title>
    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
    <!-- CSS Reset -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.css">
    <!-- Milligram CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/milligram/1.4.1/milligram.css">
    <link rel="stylesheet" href="sideNav.css">
    <link rel="stylesheet" href="dragAndDrop.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
    <script src="dragAndDropList.js"></script>
    <!--[if lt IE 9]>
  	<script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js"></script>  	<![endif]-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.16.3/cytoscape.min.js"></script>
  </head>
  <body>
    
    <script language="javascript" type="text/javascript">
            
      			var host = document.location.host;
    				var pathname = document.location.pathname;
      
            var wsUri = "ws://" + host + pathname + "hello";
            
            function init() {
                output = document.getElementById("output");
            }
            function send_message() {
                websocket = new WebSocket(wsUri);
                websocket.onopen = function(evt) {
                    onOpen(evt)
                };
                websocket.onmessage = function(evt) {
                    onMessage(evt)
                };
                websocket.onerror = function(evt) {
                    onError(evt)
                };
            }
            function onOpen(evt) {
                writeToScreen("Connected to Endpoint!");
                doSend(textID.value);
            }
            function onMessage(evt) {
                writeToScreen("Message Received: " + evt.data);
            }
            function onError(evt) {
                writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
            }
            function doSend(message) {
                writeToScreen("Message Sent: " + message);
                websocket.send(message);
                // You can close communication at any time
                //websocket.close();
            }
            function writeToScreen(message) {
                var pre = document.createElement("p");
                pre.style.wordWrap = "break-word";
                pre.innerHTML = message;
                 
                output.appendChild(pre);
            }
            window.addEventListener("load", init, false);
    </script>
    
    <main>
      <form>
        <fieldset>
          <div class="sidenav">
            <div class="container">
              <div class="row">
                <div class="column"> <label for="LoadDBbutton">Load Graph DB:</label>
                  <input class="button" id="LoadDBbutton" value="Load DB" type="submit">
                </div>
              </div>
              <div class="row">
                <div class="column"> <label for="GSgenomeSelection">Genome:</label>
                  <select id="LoadDBbutton" name="LoadDBbutton">
                    <option value="G1">G1</option>
                    <option value="G2">G2</option>
                  </select>
                </div>
                <div class="column"> <label for="GSsubStructureSelection">Substructure:</label>
                  <select id="GSsubStructureSelection" name="GSsubStructureSelection">
                    <option value="S1">S1</option>
                    <option value="S2">S2</option>
                    <option value="S3">S3</option>
                  </select>
                </div>
              </div>
              <div class="row">
                <div class="column"> <label id="GSpossibleRangeLable"></label>
                </div>
              </div>
              <div class="row">
                <div class="column"> <label id="GSstartLabel" for="GSstart">Start:</label>
                  <input id="GSstart" onchange="showVal(this.value, 'GSstartLabel', 'Start')"
                    oninput="showVal(this.value, 'GSstartLabel', 'Start')" type="range">
                </div>
                <div class="column"> <label id="GSendLabel" for="GSend">End:</label>
                  <input id="GSend" onchange="showVal(this.value, 'GSendLabel', 'End')"
                    oninput="showVal(this.value, 'GSendLabel', 'End')" type="range">
                </div>
              </div>
              <div class="row">
                <div class="column"> <label for="LoadGSbutton">Load Guide
                    Sequence:</label> <input class="button" id="LoadGSbutton" value="Load GS"
                    type="submit"> </div>
              </div>
              
              <div class="row">
                <div class="column"> 
                  <label>All Facets</label>
                  <ul id="unusedCS" class="facet-list">
                  </ul>
                </div>
                <div class="column">
                  <label>User Facets</label>
                  <ul id="usedCS" class="facet-list">
                  </ul>
                </div>
              </div>
              
              <div class="row">
                <div class="column"> 
                  <input class="checkbox" id="join" type="checkbox"> Join </div> 
              </div>
              
              <div class="row">
                <div class="column"> <label id="spaceLabel" for="space">Space:</label>
                  <input id="space" onchange="showVal(this.value, 'spaceLabel', 'Space')"
                    oninput="showVal(this.value, 'spaceLabel', 'Space')" type="range">
                </div>
                <div class="column"> <label id="thicknessLabel" for="thickness">Thickness:</label>
                  <input id="thickness" onchange="showVal(this.value, 'thicknessLabel', 'Thickness')"
                    oninput="showVal(this.value, 'thicknessLabel', 'Thickness')" type="range">
                </div>
              </div>
              
              <div class="row">
                <div class="column"> <label for="DrawButton">Draw gMSA Graph:</label>
                  <input class="button" id="DrawButton" value="Draw Graph" type="submit">
                </div>
              </div>
              
              <div style="text-align: center;">
                  <form action="">
                      <input onclick="send_message()" value="Send Message" type="button">
                      <input id="textID" name="message" value="Hello WebSocket!" type="text"><br>
                  </form>
              </div>
              <div id="output"></div>
              
            </div>
          </div>
        </fieldset>
      </form>
      <div id="cy"></div>
      <script>
      var cy = cytoscape({
        container: document.getElementById('cy'),
        elements: [
          // nodes
          { data: { id: 'a' } },
          { data: { id: 'b' } },
          { data: { id: 'c' } },
          { data: { id: 'd' } },
          { data: { id: 'e' } },
          { data: { id: 'f' } },
          // edges
          {
            data: {
              id: 'ab',
              source: 'a',
              target: 'b'
            }
          },
          {
            data: {
              id: 'cd',
              source: 'c',
              target: 'd'
            }
          },
          {
            data: {
              id: 'ef',
              source: 'e',
              target: 'f'
            }
          },
          {
            data: {
              id: 'ac',
              source: 'a',
              target: 'c'
            }
          },
          {
            data: {
              id: 'be',
              source: 'b',
              target: 'e'
            }
          }
        ],
        style: [
          {
              selector: 'node',
              style: {
                  shape: 'rectangle',
                  'background-color': 'red',
                  label: 'data(id)'
              }
          }],
        layout: {
    			name: 'grid'
				}

      });
        
        for (var i = 0; i < 10; i++) {
    cy.add({
        data: { id: 'node' + i }
        }
    );
    var source = 'node' + i;
    cy.add({
        data: {
            id: 'edge' + i,
            source: source,
            target: (i % 2 == 0 ? 'a' : 'b')
        }
    });
}

        cy.layout({
    name: 'circle'
}).run();

        cy.edges('edge').style({
    "curve-style": "bezier",
    "target-arrow-shape": "triangle"
})
        
    </script> </main>
    <script>
      let label = document.getElementById("GSpossibleRangeLable");
      let startField = document.getElementById("GSstart");
      let endField = document.getElementById("GSend");
      let start = 0;
      let end = 2000;
      label.innerHTML = "Selecte a range for the GS between " + start + " and " + end;
      startField.min = start;
      startField.max = end;
      endField.min = start;
      endField.max = end;
      
      function showVal(newValue, labelId, labelText) {
        let label = document.getElementById(labelId);
      	label.innerHTML = labelText + ": " + newValue;
      }
      
      let unusedCSlist = document.getElementById("unusedCS");
      let genomes = ["G1", "G2", "G3", "G4"];
      
      for (let g of genomes) {
        console.log(g)
      	let li = document.createElement("li");
				li.setAttribute("class", "facet");
        li.setAttribute("id", g+"ListElement");
        li.innerHTML = g;
        unusedCSlist.appendChild(li);
      }
      
    </script>
  </body>
</html>
